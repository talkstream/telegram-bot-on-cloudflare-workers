/**
 * Utilities for safe Telegram message formatting
 */

/**
 * Escapes special characters for Telegram Markdown v2
 * @param text Text to escape
 * @returns Escaped text
 */
export function escapeMarkdown(text: string): string {
  // –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown v2
  const specialChars = [
    '_',
    '*',
    '[',
    ']',
    '(',
    ')',
    '~',
    '`',
    '>',
    '#',
    '+',
    '-',
    '=',
    '|',
    '{',
    '}',
    '.',
    '!'
  ]

  let escaped = text
  for (const char of specialChars) {
    escaped = escaped.replace(new RegExp(`\\${char}`, 'g'), `\\${char}`)
  }

  return escaped
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ (–º–µ–∂–¥—É ` `)
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function escapeCode(text: string): string {
  return text.replace(/`/g, '\\`')
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –∂–∏—Ä–Ω—ã–π (bold)
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function bold(text: string): string {
  return `*${escapeMarkdown(text)}*`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫—É—Ä—Å–∏–≤ (italic)
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function italic(text: string): string {
  return `_${escapeMarkdown(text)}_`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–¥
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function code(text: string): string {
  return `\`${escapeCode(text)}\``
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –±–ª–æ–∫ –∫–æ–¥–∞
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param language –Ø–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function codeBlock(text: string, language?: string): string {
  const escaped = text.replace(/```/g, '\\`\\`\\`')
  return language ? `\`\`\`${language}\n${escaped}\n\`\`\`` : `\`\`\`\n${escaped}\n\`\`\``
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ
 * @param text –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
 * @param url URL
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
 */
export function link(text: string, url: string): string {
  return `[${escapeMarkdown(text)}](${url})`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—É
 * @param text –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
 */
export function quote(text: string): string {
  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  return text
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param error –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
export function formatError(error: unknown): string {
  let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'

  if (error instanceof Error) {
    errorMessage += `\n\n${escapeMarkdown(error.message)}`
  } else if (typeof error === 'string') {
    errorMessage += `\n\n${escapeMarkdown(error)}`
  }

  return errorMessage
}

/**
 * –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
 * @param maxLength –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
 * @returns –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function truncate(text: string, maxLength: number): string {
  if (text.length <= maxLength) {
    return text
  }

  return text.substring(0, maxLength - 3) + '...'
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
 * @param length –î–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 16)
 * @returns –õ–∏–Ω–∏—è –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
 */
export function divider(length: number = 16): string {
  return '‚îÄ'.repeat(length)
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
 * @param message –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function formatMessage(message: {
  content: string
  sender_masked_id: string
  sender_faction: string
  created_at: string
  is_read: boolean
}): string {
  const faction = message.sender_faction === 'keepers' ? 'üîµ' : 'üî¥'
  const readStatus = message.is_read ? '' : 'üî¥ '
  const date = new Date(message.created_at).toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  })

  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: escapeMarkdown –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ content. –ï—Å–ª–∏ content —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç
  // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é
  // –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ escapeMarkdown –∑–¥–µ—Å—å.
  return (
    `${readStatus}${faction} *–û—Ç: ${message.sender_masked_id}*\n` +
    `üìÖ ${date}\n\n` +
    `${escapeMarkdown(message.content)}`
  )
}

/**
 * –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param text –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
 * @param maxLength –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
 * @returns –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export function truncateMessage(text: string, maxLength: number = 1000): string {
  if (text.length <= maxLength) {
    return text
  }
  return text.substring(0, maxLength - 3) + '...'
}

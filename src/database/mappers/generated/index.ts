/**
 * Generated FieldMapper configurations from SQL schema
 * DO NOT EDIT MANUALLY - Generated by db:types command
 */

import type * as DB from '../types/generated/database';
import type * as Domain from '../types/generated/models';

import { FieldMapper, CommonTransformers } from '@/core/database/field-mapper';

export const userMapper = new FieldMapper<DB.UsersDatabaseRow, Domain.User>([
  { dbField: 'id', domainField: 'id' },
  { dbField: 'telegram_id', domainField: 'telegramId' },
  { dbField: 'first_name', domainField: 'firstName' },
  { dbField: 'last_name', domainField: 'lastName' },
  { dbField: 'username', domainField: 'username' },
  { dbField: 'stars_balance', domainField: 'starsBalance' },
  {
    dbField: 'created_at',
    domainField: 'createdAt',
    ...CommonTransformers.isoDate,
  },
]);

export const telegramPaymentMapper = new FieldMapper<
  DB.TelegramPaymentsDatabaseRow,
  Domain.TelegramPayment
>([
  { dbField: 'id', domainField: 'id' },
  { dbField: 'player_id', domainField: 'playerId' },
  { dbField: 'telegram_payment_charge_id', domainField: 'telegramPaymentChargeId' },
  { dbField: 'invoice_payload', domainField: 'invoicePayload' },
  { dbField: 'payment_type', domainField: 'paymentType' },
  { dbField: 'related_entity_id', domainField: 'relatedEntityId' },
  { dbField: 'stars_amount', domainField: 'starsAmount' },
  { dbField: 'status', domainField: 'status' },
  {
    dbField: 'created_at',
    domainField: 'createdAt',
    ...CommonTransformers.isoDate,
  },
  {
    dbField: 'updated_at',
    domainField: 'updatedAt',
    ...CommonTransformers.isoDate,
  },
]);

export const pendingInvoiceMapper = new FieldMapper<
  DB.PendingInvoicesDatabaseRow,
  Domain.PendingInvoice
>([
  { dbField: 'id', domainField: 'id' },
  { dbField: 'player_id', domainField: 'playerId' },
  { dbField: 'invoice_type', domainField: 'invoiceType' },
  { dbField: 'target_masked_id', domainField: 'targetMaskedId' },
  { dbField: 'target_faction', domainField: 'targetFaction' },
  { dbField: 'stars_amount', domainField: 'starsAmount' },
  { dbField: 'invoice_link', domainField: 'invoiceLink' },
  {
    dbField: 'expires_at',
    domainField: 'expiresAt',
    ...CommonTransformers.isoDate,
  },
  {
    dbField: 'created_at',
    domainField: 'createdAt',
    ...CommonTransformers.isoDate,
  },
]);

export const userRoleMapper = new FieldMapper<DB.UserRolesDatabaseRow, Domain.UserRole>([
  { dbField: 'user_id', domainField: 'userId' },
  { dbField: 'role', domainField: 'role' },
  { dbField: 'granted_by', domainField: 'grantedBy' },
  {
    dbField: 'granted_at',
    domainField: 'grantedAt',
    ...CommonTransformers.isoDate,
  },
]);

export const accessRequestMapper = new FieldMapper<
  DB.AccessRequestsDatabaseRow,
  Domain.AccessRequest
>([
  { dbField: 'id', domainField: 'id' },
  { dbField: 'user_id', domainField: 'userId' },
  { dbField: 'username', domainField: 'username' },
  { dbField: 'first_name', domainField: 'firstName' },
  { dbField: 'status', domainField: 'status' },
  {
    dbField: 'created_at',
    domainField: 'createdAt',
    ...CommonTransformers.isoDate,
  },
  { dbField: 'processed_by', domainField: 'processedBy' },
  {
    dbField: 'processed_at',
    domainField: 'processedAt',
    ...CommonTransformers.isoDate,
  },
]);

export const botSettingMapper = new FieldMapper<DB.BotSettingsDatabaseRow, Domain.BotSetting>([
  { dbField: 'key', domainField: 'key' },
  { dbField: 'value', domainField: 'value' },
  {
    dbField: 'updated_at',
    domainField: 'updatedAt',
    ...CommonTransformers.isoDate,
  },
]);

export const userRolesNewMapper = new FieldMapper<DB.UserRolesNewDatabaseRow, Domain.UserRolesNew>([
  { dbField: 'user_id', domainField: 'userId' },
  { dbField: 'platform_id', domainField: 'platformId' },
  { dbField: 'platform', domainField: 'platform' },
  { dbField: 'role', domainField: 'role' },
  { dbField: 'granted_by', domainField: 'grantedBy' },
  {
    dbField: 'granted_at',
    domainField: 'grantedAt',
    ...CommonTransformers.isoDate,
  },
]);

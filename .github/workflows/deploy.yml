name: Deploy (Optional)

# This workflow is optional - it will only work if you've set up:
# 1. CLOUDFLARE_API_TOKEN secret
# 2. CLOUDFLARE_ACCOUNT_ID secret
# 3. Created D1 database and KV namespaces in Cloudflare

on:
  workflow_dispatch: # Manual trigger only
  # Uncomment below to enable automatic deployment on push
  # push:
  #   branches:
  #     - main

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    name: Check Configuration
    outputs:
      has-secrets: ${{ steps.check.outputs.has-secrets }}
    steps:
      - name: Check for required secrets
        id: check
        run: |
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ] && [ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "has-secrets=true" >> $GITHUB_OUTPUT
            echo "✅ Cloudflare secrets are configured"
          else
            echo "has-secrets=false" >> $GITHUB_OUTPUT
            echo "::notice::Cloudflare secrets are not configured. Deployment will be skipped."
            echo "::notice::To enable deployment, add CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID secrets."
            echo "::notice::See SETUP.md for detailed instructions."
          fi

  deploy:
    needs: check-secrets
    if: needs.check-secrets.outputs.has-secrets == 'true'
    runs-on: ubuntu-latest
    name: Deploy
    environment:
      name: production-clean
      url: https://telegram-bot-wireframe.workers.dev
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
      - name: Create wrangler.toml for deployment
        run: |
          cp wrangler.toml.example wrangler.toml
          echo "Note: Using example config. Ensure D1 and KV namespaces are configured in Cloudflare dashboard."

      - name: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production --dry-run

      - name: Deploy Notice
        run: |
          echo "::notice::Deployment completed in dry-run mode."
          echo "::notice::To enable actual deployment:"
          echo "::notice::1. Create D1 database and KV namespaces in Cloudflare"
          echo "::notice::2. Update wrangler.toml with correct resource IDs"
          echo "::notice::3. Remove --dry-run flag from deploy command"
          echo "::notice::See SETUP.md for detailed instructions."

  create-deployment-record:
    needs: check-secrets
    if: needs.check-secrets.outputs.has-secrets != 'true'
    runs-on: ubuntu-latest
    name: Deployment Status
    environment:
      name: production-clean
      url: https://telegram-bot-wireframe.workers.dev
    steps:
      - name: Create deployment record
        run: |
          echo "::notice::📋 Deployment Prerequisites Not Met"
          echo "::notice::━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "::notice::This wireframe is ready for deployment, but requires configuration:"
          echo "::notice::"
          echo "::notice::1. Add CLOUDFLARE_API_TOKEN secret"
          echo "::notice::2. Add CLOUDFLARE_ACCOUNT_ID secret"  
          echo "::notice::3. Create D1 database and KV namespaces"
          echo "::notice::"
          echo "::notice::See SETUP.md for detailed instructions."
          echo "::notice::━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

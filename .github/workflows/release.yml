name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    name: Check Configuration
    outputs:
      has-secrets: ${{ steps.check.outputs.has-secrets }}
    steps:
      - name: Check for required secrets
        id: check
        run: |
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ] && [ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "has-secrets=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Cloudflare secrets are configured"
          else
            echo "has-secrets=false" >> $GITHUB_OUTPUT
            echo "::notice::Cloudflare deployment skipped - secrets not configured"
          fi

  release:
    name: Create Release
    needs: check-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Configure git
        run: git config --global init.defaultBranch main

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: |
            {
              "template": "#{{CHANGELOG}}\n\n**Full Changelog**: #{{RELEASE_DIFF}}",
              "pr_template": "- #{{TITLE}} by @#{{AUTHOR}} in ##{{NUMBER}}",
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": ["feature", "enhancement"]
                },
                {
                  "title": "## üêõ Bug Fixes",
                  "labels": ["bug", "fix"]
                },
                {
                  "title": "## üìö Documentation",
                  "labels": ["documentation", "docs"]
                },
                {
                  "title": "## üß™ Tests",
                  "labels": ["test", "tests"]
                },
                {
                  "title": "## üîß Maintenance",
                  "labels": ["chore", "maintenance", "dependencies"]
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Production
        if: needs.check-secrets.outputs.has-secrets == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production

      - name: Deployment Notice
        if: needs.check-secrets.outputs.has-secrets != 'true'
        run: |
          echo "::notice::üìã Cloudflare deployment skipped"
          echo "::notice::This is a wireframe project - deployment is optional"
          echo "::notice::To enable deployment, add CLOUDFLARE_API_TOKEN and CLOUDFLARE_ACCOUNT_ID secrets"

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            Release ${{ github.ref_name }} has been ${{ job.status }}
            Changelog: ${{ steps.changelog.outputs.changelog }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
